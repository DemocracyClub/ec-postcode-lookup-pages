AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "EC Postcode Lookup app: Lambda, API Gateway"

Globals:
  Function:
    Timeout: 10
  Api:
    BinaryMediaTypes:
      - "*/*"

Parameters:
  FQDN:
    Default: FQDN
    Description: "The domain name this app is mounted on"
    Type: AWS::SSM::Parameter::Value<String>

  CertificateArn:
    Default: CertificateArn
    Description: "The ARN of the cert to use"
    Type: AWS::SSM::Parameter::Value<String>

Resources:
  ECDeployerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: ECDeployer


  ECPostcodeLookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ECPostcodeLookupFunction
      Timeout: 60
#      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/ECPostcodeLookupLambdaExecutionRole"
      CodeUri: postcode_lookup
      Handler: app.handler
      Runtime: python3.8
      MemorySize: 128
      Environment:
        Variables:
          FQDN: !Ref FQDN
      Events:
        HTTPRequests:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        HTTPRequestRoots:
          Type: Api
          Properties:
            Path: /
            Method: ANY

  ECPostcodeLookupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [ ECPostcodeLookupFunction ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${ECPostcodeLookupFunction}
      RetentionInDays: 60

  FailOver:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${FQDN}-failover"
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
  FailOverBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FailOver
                - /*
      Bucket: !Ref FailOver

  StaticPages:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub "${FQDN}-static-pages"
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
      DeletionPolicy: Retain
  StaticPagesBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: StaticPagesPublicAccessPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref StaticPages
                - /*
      Bucket: !Ref StaticPages



  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront Distribution pointing to Lambda origin'
        Origins:
          - Id: Dynamic
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
            OriginCustomHeaders:
              - HeaderName: X-Forwarded-Host
                HeaderValue: www.staging-5em2ouy-qicelq4x33qps.eu-2.platformsh.site
              - HeaderName: X-Forwarded-Proto
                HeaderValue: https
            OriginShield:
              Enabled: true
              OriginShieldRegion: eu-west-2
          - Id: StaticPages
            DomainName: !Sub "${FQDN}-static-pages.s3-website.eu-west-2.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
            ConnectionAttempts: 1
            ConnectionTimeout: 2
            OriginShield:
              Enabled: false
          - Id: Failover
            DomainName: !Sub "${FQDN}-failover.s3-website.eu-west-2.amazonaws.com"
            # Keep the ? to convert the path in to a query param
            OriginPath: "/index.html?"
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
            OriginShield:
              Enabled: false
              OriginShieldRegion: eu-west-2
        OriginGroups:
          Quantity: 2
          Items:
            - Id: DynamicPagesFailOverOriginGroup
              FailoverCriteria:
                StatusCodes:
                  Quantity: 6
                  Items:
                  - 404
                  - 400
                  - 500
                  - 502
                  - 503
                  - 504
              Members:
                Quantity: 2
                Items:
                - OriginId: Dynamic
                - OriginId: Failover
            - Id: StaticPagesOriginGroup
              FailoverCriteria:
                StatusCodes:
                  Quantity: 6
                  Items:
                  - 404
                  - 400
                  - 500
                  - 502
                  - 503
                  - 504
              Members:
                Quantity: 2
                Items:
                - OriginId: StaticPages
                - OriginId: Dynamic
        Enabled: true
        HttpVersion: 'http2'
        Aliases:
          - !Ref FQDN
        PriceClass: "PriceClass_100"
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

        DefaultCacheBehavior:
          AllowedMethods: [ GET, HEAD, OPTIONS ]
          TargetOriginId: DynamicPagesFailOverOriginGroup
          DefaultTTL: '60'
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: "all"
            Headers:
              - Authorization
              - Origin
              - Referer
          ViewerProtocolPolicy: "redirect-to-https"

        CacheBehaviors:
          - AllowedMethods: [ GET, HEAD, OPTIONS ]
            PathPattern: static/*
            TargetOriginId: Dynamic
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: "redirect-to-https"
            DefaultTTL: '31536000'
            MaxTTL: '31536000'
          - AllowedMethods: [ GET, HEAD, OPTIONS ]
            PathPattern: /i-am-a/voter/your-election-information
            TargetOriginId: StaticPagesOriginGroup
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: "redirect-to-https"
          - AllowedMethods: [ GET, HEAD, OPTIONS ]
            PathPattern: /cy/rwyf-yneg-pleidleisiwr/pleidleisiwr/gwybodaeth-etholiad
            TargetOriginId: StaticPagesOriginGroup
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: "redirect-to-https"


  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # this is an AWS-owned, global singleton required for Aliases to CloudFront
      HostedZoneName: !Sub "${FQDN}."
      Name: !Sub "${FQDN}."
      Type: A

Outputs:
  ECPostcodeLookupFqdn:
    Description: "API Gateway endpoint FQDN for EC Postcode Lookup function"
    Value: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "ECPostcodeLookupFqdn" ] ]
