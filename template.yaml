AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "EC Postcode Lookup app: Lambda, API Gateway"

Globals:
  Function:
    Timeout: 10
  Api:
    BinaryMediaTypes:
      - "*/*"

Parameters:
  FQDN:
    Default: FQDN
    Description: "The domain name this app is mounted on"
    Type: AWS::SSM::Parameter::Value<String>

  CertificateArn:
    Default: CertificateArn
    Description: "The ARN of the cert to use"
    Type: AWS::SSM::Parameter::Value<String>

Resources:

#  DependenciesLayer:
#    Type: AWS::Serverless::LayerVersion
#    Properties:
#      ContentUri: ./lambda-layers/DependenciesLayer/
#      CompatibleRuntimes:
#        - python3.8
#    Metadata:
#      BuildMethod: makefile
#    RetentionPolicy: Delete

  ECDeployerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: ECDeployer


  ECPostcodeLookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ECPostcodeLookupFunction
      Timeout: 60
#      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/ECPostcodeLookupLambdaExecutionRole"
      CodeUri: postcode_lookup
      Handler: app.handler
      Runtime: python3.8
      MemorySize: 128
      Environment:
        Variables:
          FQDN: !Ref FQDN
      Events:
        HTTPRequests:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        HTTPRequestRoots:
          Type: Api
          Properties:
            Path: /
            Method: ANY

  ECPostcodeLookupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [ ECPostcodeLookupFunction ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${ECPostcodeLookupFunction}
      RetentionInDays: 60

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront Distribution pointing to Lambda origin'
        Origins:
          - Id: Dynamic
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
            OriginCustomHeaders:
              - HeaderName: X-Forwarded-Host
                HeaderValue: !Ref FQDN
              - HeaderName: X-Forwarded-Proto
                HeaderValue: https
            OriginShield:
              Enabled: true
              OriginShieldRegion: eu-west-2
        Enabled: true
        HttpVersion: 'http2'
        Aliases:
          - !Ref FQDN
        PriceClass: "PriceClass_100"
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

        DefaultCacheBehavior:
          AllowedMethods: [ GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE ]
          TargetOriginId: Dynamic
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: "all"
            Headers:
              - Authorization
              - Origin
              - Referer
          ViewerProtocolPolicy: "redirect-to-https"

#        CacheBehaviors:
#          - AllowedMethods: [ GET, HEAD, OPTIONS ]
#            PathPattern: static/*
#            TargetOriginId: Static
#            Compress: true
#            ForwardedValues:
#              QueryString: true
#              Cookies:
#                Forward: none
#              Headers:
#                - Authorization
#                - Origin
#            ViewerProtocolPolicy: "redirect-to-https"
#            MinTTL: '50'
#          - AllowedMethods: [ GET, HEAD ]
#            PathPattern: media/*
#            ForwardedValues:
#              QueryString: false
#              Cookies:
#                Forward: none
#            TargetOriginId: Media
#            Compress: true
#            ViewerProtocolPolicy: "redirect-to-https"
#            MinTTL: '50'

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # this is an AWS-owned, global singleton required for Aliases to CloudFront
      HostedZoneName: !Sub "${FQDN}."
      Name: !Sub "${FQDN}."
      Type: A

Outputs:
  ECPostcodeLookupFqdn:
    Description: "API Gateway endpoint FQDN for EC Postcode Lookup function"
    Value: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "ECPostcodeLookupFqdn" ] ]
