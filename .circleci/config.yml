version: 2.1
orbs:
  codecov: codecov/codecov@4.1.0
  aws-cli: circleci/aws-cli@4.2.3

commands:
  install_uv:
    steps:
      - run: pip install --upgrade uv">=0.4.27,<0.5.0"


jobs:
  install_and_update_dependencies:
    docker:
      - image: cimg/python:3.12-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "uv.lock" }}
      - install_uv
      - run: uv sync --dev --no-python-downloads
      - run: uv export --no-hashes --no-dev > postcode_lookup/requirements.txt
      - persist_to_workspace:
          root: ~/repo/
          paths: [ postcode_lookup/requirements.txt ]

      - save_cache:
          when: on_success
          paths:
            - ~/.local/share/virtualenvs/
          key: v4-dependencies-{{ checksum "uv.lock" }}

  test:
    docker:
      - image: cimg/python:3.12
        environment:
          CIRCLECI: true
    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "uv.lock" }}
      - install_uv
      - run: ./scripts/code-check.sh
      - run:
          name: Install Playwright-deps
          command: |
            sudo .venv/bin/playwright install-deps
      - run: uv run playwright install
      - run: uv run pytest --cov-report= --cov=postcode_lookup --junitxml=test-reports/junit.xml
      - codecov/upload:
          file: /home/circleci/repo/test-reports/junit.xml
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - store_test_results:
          path: test-reports/junit.xml

  sam_build:
    docker:
      - image: public.ecr.aws/sam/build-python3.12:latest
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - install_uv
      - run: uv sync --dev  --no-python-downloads
      - run: sam build ${DASH_DASH_DEBUG} --template-file template.yaml
      - persist_to_workspace:
          root: ~/repo/
          paths: [ .aws-sam/build/ ]

  sam_deploy:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      SAM_CONFIG_FILE: samconfig.toml
      DC_ENVIRONMENT: <<parameters.dc-environment>>
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "uv.lock" }}
      - install_uv
      - run: uv venv
      - run: uv pip install aws-sam-cli

      - run:
          name: "uv run sam deploy"
          command: |
            uv run sam deploy ${DASH_DASH_DEBUG} \
              --config-file ~/repo/${SAM_CONFIG_FILE} \
              --config-env $DC_ENVIRONMENT \
              --template-file ~/repo/.aws-sam/build/template.yaml \
              --parameter-overrides "GitHash='$CIRCLE_SHA1'"
      - aws-cli/setup
      - run:
          name: "Publish a new Sentry Release"
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            sentry-cli releases --org democracy-club-gp new $CIRCLE_SHA1 --project ec-postcode-lookup
            sentry-cli releases --org democracy-club-gp set-commits --auto $CIRCLE_SHA1 --ignore-missing
            sentry-cli releases --org democracy-club-gp finalize $CIRCLE_SHA1

  static_deploy:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "uv.lock" }}
      - install_uv
      - run: uv venv
      - aws-cli/setup
      - run:
          name: "Export parameter store env vars"
          command: |
            echo "export FQDN=`aws ssm get-parameter --query Parameter.Value --name 'FQDN' --output text`" >> "$BASH_ENV"
            echo "export X_FORWARDED_HOST=`aws ssm get-parameter --query Parameter.Value --name 'XForwardedForHost' --output text`" >> "$BASH_ENV"
      - run:
          name: "Update failover page"
          command: |
            uv run python failover/build.py
            aws s3 cp failover/dist/index.html "s3://${FQDN}-failover/index.html" \
              --cache-control max-age=0 \
              --content-type text/html
      - run:
          name: "Update static pages"
          command: |
            uv run python lib/static_pages/generate.py
            aws s3 sync \
                lib/static_pages/build/ "s3://${FQDN}-static-pages/" \
                --cache-control max-age=600 \
                --content-type text/html

  smoke_test:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "uv.lock" }}
      - install_uv
      - run: uv sync --dev  --no-python-downloads
      - aws-cli/setup
      - run:
          name: "Post deploy tests"
          command: |
            export FQDN=`aws ssm get-parameter --query Parameter.Value --name 'FQDN' --output text`
            export DC_ENVIRONMENT=`aws ssm get-parameter --query Parameter.Value --name 'DC_ENVIRONMENT' --output text`
            uv run pytest .circleci/tests/


workflows:
  test_build_deploy:
    jobs:
      - install_and_update_dependencies
      - test:
          requires:
            - install_and_update_dependencies
      - sam_build:
          requires:
            - test
      - sam_deploy:
          name: sam_deploy_development
          dc-environment: development
          requires:
            - sam_build
          context: [ deployment-development-ec-postcode-lookup ]
          filters: { branches: { only: [ development, mock-api-backend ] } }
      - static_deploy:
          name: static_deploy_development
          dc-environment: development
          requires:
            - sam_deploy_development
          context: [ deployment-development-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master, mock-api-backend ] } }
      - smoke_test:
          name: smoke_test_development
          dc-environment: development
          requires:
            - static_deploy_development
          context: [ deployment-development-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master ] } }


      - sam_deploy:
          name: sam_deploy_staging
          dc-environment: staging
          requires:
            - sam_build
          context: [ deployment-staging-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master ] } }
      - static_deploy:
          name: static_deploy_staging
          dc-environment: staging
          requires:
            - sam_deploy_staging
          context: [ deployment-staging-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master ] } }
      - smoke_test:
          name: smoke_test_staging
          dc-environment: staging
          requires:
            - static_deploy_staging
          context: [ deployment-staging-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master ] } }


      - sam_deploy:
          name: sam_deploy_production
          dc-environment: production
          requires:
            - smoke_test_staging
          context: [ deployment-production-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master ] } }
      - static_deploy:
          name: static_deploy_production
          dc-environment: production
          requires:
            - sam_deploy_production
          context: [ deployment-production-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master ] } }
      - smoke_test:
          name: smoke_test_production
          dc-environment: production
          requires:
            - static_deploy_production
          context: [ deployment-production-ec-postcode-lookup ]
          filters: { branches: { only: [ main, master ] } }
